// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id           String            @id @default(uuid())
  email        String            @unique
  name         String
  role         Role              @default(USER)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  associations UserAssociation[]
  attendances  Attendance[]
}

// Enumeración de roles
enum Role {
  ADMIN
  MANAGER
  USER
}

// Modelo de Asociación
model Association {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     UserAssociation[]
  congresses  Congress[]
}

// Relación muchos a muchos entre User y Association
model UserAssociation {
  id            String          @id @default(uuid())
  userId        String
  associationId String
  role          AssociationRole @default(MEMBER)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  association   Association     @relation(fields: [associationId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())

  @@unique([userId, associationId])
}

// Enumeración de roles de asociación
enum AssociationRole {
  OWNER
  RESPONSIBLE
  MEMBER
}

// Modelo de Congreso
model Congress {
  id            String      @id @default(uuid())
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime
  location      String?
  associationId String
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  events        Event[]
}

// Modelo de Tipo de Evento
model EventType {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

// Modelo de Evento
model Event {
  id          String       @id @default(uuid())
  name        String
  description String?
  date        DateTime
  duration    Int // Duración en minutos
  location    String?
  congressId  String
  eventTypeId String
  qrCode      String? // Código QR único para el evento
  congress    Congress     @relation(fields: [congressId], references: [id], onDelete: Cascade)
  eventType   EventType    @relation(fields: [eventTypeId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
}

// Modelo de Asistencia
model Attendance {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}
